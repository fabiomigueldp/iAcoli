#!/usr/bin/env python3
"""
Script de teste para verificar as melhorias no agente iAcoli.
"""

import sys
import os
from pathlib import Path

# Adiciona o diret√≥rio do projeto ao path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Testa as importa√ß√µes diretamente (evitando importa√ß√£o circular)
try:
    import importlib.util
    
    # Carrega models.py
    spec = importlib.util.spec_from_file_location("models", project_root / "iacoli_core" / "models.py")
    models_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(models_module)
    ROLE_CODES = models_module.ROLE_CODES
    COMMUNITIES = models_module.COMMUNITIES
    
    # Carrega prompt_builder.py
    spec = importlib.util.spec_from_file_location("prompt_builder", project_root / "iacoli_core" / "agent" / "prompt_builder.py")
    pb_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(pb_module)
    BASE_PROMPT = pb_module.BASE_PROMPT
    build_system_prompt = pb_module.build_system_prompt
    
    print("‚úÖ Importa√ß√µes bem-sucedidas!")
except Exception as e:
    print(f"‚ùå Erro na importa√ß√£o: {e}")
    sys.exit(1)

def test_base_prompt():
    """Testa se o novo BASE_PROMPT cont√©m as melhorias esperadas."""
    print("\n=== TESTANDO BASE_PROMPT ===")
    
    # Verifica se cont√©m as regras cr√≠ticas
    expected_phrases = [
        "REGRAS CR√çTICAS E INVIOL√ÅVEIS",
        "SA√çDA ESTRITAMENTE JSON",
        "N√ÉO SEJA UM ASSISTENTE GERAL",
        "USE AS FERRAMENTAS",
        "{system_context}",
        "{tool_docs}"
    ]
    
    for phrase in expected_phrases:
        if phrase in BASE_PROMPT:
            print(f"‚úÖ Cont√©m: {phrase}")
        else:
            print(f"‚ùå Faltando: {phrase}")
    
    print(f"üìä Tamanho do prompt: {len(BASE_PROMPT)} caracteres")

def test_system_context():
    """Testa se o contexto do sistema est√° sendo injetado corretamente."""
    print("\n=== TESTANDO CONTEXTO DO SISTEMA ===")
    
    # Testa com uma requisi√ß√£o simples
    prompt = build_system_prompt("cadastrar acolito")
    
    # Verifica se ROLE_CODES est√£o no prompt
    all_roles_present = all(role in prompt for role in ROLE_CODES)
    if all_roles_present:
        print("‚úÖ Todos os ROLE_CODES est√£o no contexto")
    else:
        print("‚ùå Alguns ROLE_CODES est√£o faltando no contexto")
    
    # Verifica se comunidades est√£o no prompt
    communities_present = any(community in prompt for community in COMMUNITIES.keys())
    if communities_present:
        print("‚úÖ Comunidades est√£o no contexto")
    else:
        print("‚ùå Comunidades n√£o est√£o no contexto")
    
    # Verifica se o contexto n√£o cont√©m mais os placeholders
    if "{system_context}" not in prompt and "{tool_docs}" not in prompt:
        print("‚úÖ Placeholders foram substitu√≠dos corretamente")
    else:
        print("‚ùå Ainda h√° placeholders n√£o substitu√≠dos")
    
    print(f"üìä Tamanho do prompt completo: {len(prompt)} caracteres")

def test_role_codes_content():
    """Verifica se ROLE_CODES tem o conte√∫do esperado."""
    print("\n=== TESTANDO ROLE_CODES ===")
    
    expected_roles = ["LIB", "CRU", "MIC", "TUR", "NAV", "CER1", "CER2", "CAM"]
    
    for role in expected_roles:
        if role in ROLE_CODES:
            print(f"‚úÖ Role presente: {role}")
        else:
            print(f"‚ùå Role faltando: {role}")
    
    print(f"üìä Total de roles: {len(ROLE_CODES)}")

def main():
    """Executa todos os testes."""
    print("üîç TESTANDO MELHORIAS DO AGENTE iAcoli")
    print("=" * 50)
    
    test_role_codes_content()
    test_base_prompt()
    test_system_context()
    
    print("\n" + "=" * 50)
    print("‚úÖ Todos os testes conclu√≠dos!")
    print("\nüéØ RESUMO DAS MELHORIAS IMPLEMENTADAS:")
    print("‚Ä¢ BASE_PROMPT mais restritivo e diretivo")
    print("‚Ä¢ Contexto din√¢mico com ROLE_CODES e COMMUNITIES")
    print("‚Ä¢ Instru√ß√µes claras sobre 'todas as fun√ß√µes'")
    print("‚Ä¢ Pronto para response_format={'type': 'json_object'}")
    print("‚Ä¢ Pronto para extra_body={'disable_search': True}")

if __name__ == "__main__":
    main()